<?php
namespace Defuse\Crypto;

use \Defuse\Crypto\Exception as Ex;

use \Defuse\Crypto\Core;
use \Defuse\Crypto\Encoding;

/*
 * PHP Encryption Library
 * Copyright (c) 2014-2015, Taylor Hornby <https://defuse.ca>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
final class Crypto
{
    // Ciphertext format: [____VERSION____][____HMAC____][____IV____][____CIPHERTEXT____].
    // Legacy format: [____HMAC____][____IV____][____CIPHERTEXT____].

    /**
     * Use this to generate a random encryption key.
     *
     * @return string
     */
    public static function createNewRandomKey()
    {
        $config = self::getVersionConfigFromHeader(Core::CURRENT_VERSION, Core::CURRENT_VERSION);
        return Core::secureRandom($config['KEY_BYTE_SIZE']);
    }

    /**
     * Encrypts a message.
     *
     * $plaintext is the message to encrypt.
     * $key is the encryption key, a value generated by CreateNewRandomKey().
     * You MUST catch exceptions thrown by this function. See docs above.
     *
     * @param string $plaintext
     * @param string $key
     * @param boolean $raw_binary
     * @return string
     * @throws Ex\CannotPerformOperationException
     */
    public static function encrypt($plaintext, $key, $raw_binary = false)
    {
        self::runtimeTest();
        $config = self::getVersionConfigFromHeader(Core::CURRENT_VERSION, Core::CURRENT_VERSION);

        if (Core::ourStrlen($key) !== $config['KEY_BYTE_SIZE']) {
            throw new Ex\CannotPerformOperationException("Key is the wrong size.");
        }
        $salt = Core::secureRandom($config['SALT_SIZE']);

        // Generate a sub-key for encryption.
        $ekey = Core::HKDF(
            $config['HASH_FUNCTION'],
            $key,
            $config['KEY_BYTE_SIZE'],
            $config['ENCRYPTION_INFO'],
            $salt,
            $config
        );

        // Generate a sub-key for authentication and apply the HMAC.
        $akey = Core::HKDF(
            $config['HASH_FUNCTION'],
            $key,
            $config['KEY_BYTE_SIZE'],
            $config['AUTHENTICATION_INFO'],
            $salt,
            $config
        );

        // Generate a random initialization vector.
        Core::ensureFunctionExists("openssl_cipher_iv_length");
        $ivsize = \openssl_cipher_iv_length($config['CIPHER_METHOD']);
        if ($ivsize === false || $ivsize <= 0) {
            throw new Ex\CannotPerformOperationException(
                "Could not get the IV length from OpenSSL"
            );
        }
        $iv = Core::secureRandom($ivsize);

        $ciphertext = $salt . $iv . self::plainEncrypt($plaintext, $ekey, $iv, $config);
        $auth = \hash_hmac($config['HASH_FUNCTION'], Core::CURRENT_VERSION . $ciphertext, $akey, true);

        // We're now appending the header as of 2.00
        $ciphertext = Core::CURRENT_VERSION . $auth . $ciphertext;

        if ($raw_binary) {
            return $ciphertext;
        }
        return Encoding::binToHex($ciphertext);
    }

    /**
     * Decrypts a ciphertext.
     * $ciphertext is the ciphertext to decrypt.
     * $key is the key that the ciphertext was encrypted with.
     * You MUST catch exceptions thrown by this function. See docs above.
     *
     * @param string $ciphertext
     * @param string $key
     * @param boolean $raw_binary
     * @return type
     * @throws Ex\CannotPerformOperationException
     * @throws Ex\InvalidCiphertextException
     */
    public static function decrypt($ciphertext, $key, $raw_binary = false)
    {
        self::runtimeTest();
        if (!$raw_binary) {
            $ciphertext = Encoding::hexToBin($ciphertext);
        }

        // Grab the header tag
        $version = Core::ourSubstr($ciphertext, 0, Core::HEADER_VERSION_SIZE);

        // Load the configuration for this version
        $config = self::getVersionConfigFromHeader($version, Core::CURRENT_VERSION);

        // Now let's operate on the remainder of the ciphertext as normal
        $ciphertext = Core::ourSubstr($ciphertext, Core::HEADER_VERSION_SIZE, null);

        // Extract the HMAC from the front of the ciphertext.
        if (Core::ourStrlen($ciphertext) <= $config['MAC_BYTE_SIZE']) {
            throw new Ex\InvalidCiphertextException(
                "Ciphertext is too short."
            );
        }
        $hmac = Core::ourSubstr(
            $ciphertext, 
            0,
            $config['MAC_BYTE_SIZE']
        );
        if ($hmac === false) {
            throw new Ex\CannotPerformOperationException();
        }
        $salt = Core::ourSubstr(
            $ciphertext,
            $config['MAC_BYTE_SIZE'], 
            $config['SALT_SIZE']
        );
        if ($salt === false) {
            throw new Ex\CannotPerformOperationException();
        }
        
        $ciphertext = Core::ourSubstr(
            $ciphertext,
            $config['MAC_BYTE_SIZE'] + $config['SALT_SIZE']
        );
        if ($ciphertext === false) {
            throw new Ex\CannotPerformOperationException();
        }

        // Regenerate the same authentication sub-key.
        $akey = Core::HKDF($config['HASH_FUNCTION'], $key, $config['KEY_BYTE_SIZE'], $config['AUTHENTICATION_INFO'], $salt, $config);

        if (self::verifyHMAC($hmac, $version . $salt . $ciphertext, $akey, $config)) {
            // Regenerate the same encryption sub-key.
            $ekey = Core::HKDF($config['HASH_FUNCTION'], $key, $config['KEY_BYTE_SIZE'], $config['ENCRYPTION_INFO'], $salt, $config);

            // Extract the initialization vector from the ciphertext.
            Core::EnsureFunctionExists("openssl_cipher_iv_length");
            $ivsize = \openssl_cipher_iv_length($config['CIPHER_METHOD']);
            if ($ivsize === false || $ivsize <= 0) {
                throw new Ex\CannotPerformOperationException(
                    "Could not get the IV length from OpenSSL"
                );
            }
            if (Core::ourStrlen($ciphertext) <= $ivsize) {
                throw new Ex\InvalidCiphertextException(
                    "Ciphertext is too short."
                );
            }
            $iv = Core::ourSubstr($ciphertext, 0, $ivsize);
            if ($iv === false) {
                throw new Ex\CannotPerformOperationException();
            }
            $ciphertext = Core::ourSubstr($ciphertext, $ivsize);
            if ($ciphertext === false) {
                throw new Ex\CannotPerformOperationException();
            }

            $plaintext = self::plainDecrypt($ciphertext, $ekey, $iv, $config);

            return $plaintext;
        } else {
            /*
             * We throw an exception instead of returning false because we want
             * a script that doesn't handle this condition to CRASH, instead
             * of thinking the ciphertext decrypted to the value false.
             */
            throw new Ex\InvalidCiphertextException(
                "Integrity check failed."
            );
        }
    }

    /**
     * Decrypts a ciphertext (legacy -- before version tagging)
     *
     * $ciphertext is the ciphertext to decrypt.
     * $key is the key that the ciphertext was encrypted with.
     * You MUST catch exceptions thrown by this function. See docs above.
     *
     * @param string $ciphertext
     * @param string $key
     * @return type
     * @throws Ex\CannotPerformOperationException
     * @throws Ex\InvalidCiphertextException
     */
    public static function legacyDecrypt($ciphertext, $key)
    {
        self::runtimeTest();
        $config = self::getVersionConfigFromHeader(Core::LEGACY_VERSION, Core::LEGACY_VERSION);

        // Extract the HMAC from the front of the ciphertext.
        if (Core::ourStrlen($ciphertext) <= $config['MAC_BYTE_SIZE']) {
            throw new Ex\InvalidCiphertextException(
                "Ciphertext is too short."
            );
        }
        $hmac = Core::ourSubstr($ciphertext, 0, $config['MAC_BYTE_SIZE']);
        if ($hmac === false) {
            throw new Ex\CannotPerformOperationException();
        }
        $ciphertext = Core::ourSubstr($ciphertext, $config['MAC_BYTE_SIZE']);
        if ($ciphertext === false) {
            throw new Ex\CannotPerformOperationException();
        }

        // Regenerate the same authentication sub-key.
        $akey = Core::HKDF(
            $config['HASH_FUNCTION'],
            $key,
            $config['KEY_BYTE_SIZE'],
            $config['AUTHENTICATION_INFO'],
            null,
            $config
        );

        if (self::verifyHMAC($hmac, $ciphertext, $akey, $config)) {
            // Regenerate the same encryption sub-key.
            $ekey = Core::HKDF(
                $config['HASH_FUNCTION'],
                $key,
                $config['KEY_BYTE_SIZE'],
                $config['ENCRYPTION_INFO'],
                null,
                $config
            );

            // Extract the initialization vector from the ciphertext.
            Core::EnsureFunctionExists("openssl_cipher_iv_length");
            $ivsize = \openssl_cipher_iv_length($config['CIPHER_METHOD']);
            if ($ivsize === false || $ivsize <= 0) {
                throw new Ex\CannotPerformOperationException(
                    "Could not get the IV length from OpenSSL"
                );
            }
            if (Core::ourStrlen($ciphertext) <= $ivsize) {
                throw new Ex\InvalidCiphertextException(
                    "Ciphertext is too short."
                );
            }
            $iv = Core::ourSubstr($ciphertext, 0, $ivsize);
            if ($iv === false) {
                throw new Ex\CannotPerformOperationException();
            }
            $ciphertext = Core::ourSubstr($ciphertext, $ivsize);
            if ($ciphertext === false) {
                throw new Ex\CannotPerformOperationException();
            }

            $plaintext = self::plainDecrypt($ciphertext, $ekey, $iv, $config);

            return $plaintext;
        } else {
            /*
             * We throw an exception instead of returning false because we want
             * a script that doesn't handle this condition to CRASH, instead
             * of thinking the ciphertext decrypted to the value false.
             */
            throw new Ex\InvalidCiphertextException(
                "Integrity check failed."
            );
        }
    }

    /*
     * Runs tests.
     * Raises CannotPerformOperationExceptionException or CryptoTestFailedExceptionException if
     * one of the tests fail. If any tests fails, your system is not capable of
     * performing encryption, so make sure you fail safe in that case.
     */
    public static function runtimeTest()
    {
        // 0: Tests haven't been run yet.
        // 1: Tests have passed.
        // 2: Tests are running right now.
        // 3: Tests have failed.
        static $test_state = 0;

        $config = self::getVersionConfigFromHeader(Core::CURRENT_VERSION, Core::CURRENT_VERSION);

        if ($test_state === 1 || $test_state === 2) {
            return;
        }

        if ($test_state === 3) {
            /* If an intermittent problem caused a test to fail previously, we
             * want that to be indicated to the user with every call to this
             * library. This way, if the user first does something they really
             * don't care about, and just ignores all exceptions, they won't get 
             * screwed when they then start to use the library for something
             * they do care about. */
            throw new Ex\CryptoTestFailedException("Tests failed previously.");
        }

        try {
            $test_state = 2;

            Core::ensureFunctionExists('openssl_get_cipher_methods');
            if (\in_array($config['CIPHER_METHOD'], \openssl_get_cipher_methods()) === false) {
                throw new Ex\CryptoTestFailedException("Cipher method not supported.");
            }

            self::AESTestVector($config);
            self::HMACTestVector($config);
            self::HKDFTestVector($config);

            self::testEncryptDecrypt($config);
            if (Core::ourStrlen(self::createNewRandomKey()) != $config['KEY_BYTE_SIZE']) {
                throw new Ex\CryptoTestFailedException();
            }

            if ($config['ENCRYPTION_INFO'] == $config['AUTHENTICATION_INFO']) {
                throw new Ex\CryptoTestFailedException();
            }
        } catch (Ex\CryptoTestFailedException $ex) {
            // Do this, otherwise it will stay in the "tests are running" state.
            $test_state = 3;
            throw $ex;
        }

        // Change this to '0' make the tests always re-run (for benchmarking).
        $test_state = 1;
    }

    /**
     * Never call this method directly!
     *
     * Unauthenticated message encryption.
     *
     * @param string $plaintext
     * @param string $key
     * @param string $iv
     * @param array $config
     * @return string
     * @throws Ex\CannotPerformOperationException
     */
    private static function plainEncrypt($plaintext, $key, $iv, $config)
    {
        Core::ensureConstantExists("OPENSSL_RAW_DATA");
        Core::ensureFunctionExists("openssl_encrypt");
        $ciphertext = \openssl_encrypt(
            $plaintext,
            $config['CIPHER_METHOD'],
            $key,
            OPENSSL_RAW_DATA,
            $iv
        );

        if ($ciphertext === false) {
            throw new Ex\CannotPerformOperationException(
                "openssl_encrypt() failed."
            );
        }

        return $ciphertext;
    }

    /**
     * Never call this method directly!
     *
     * Unauthenticated message deryption.
     *
     * @param string $ciphertext
     * @param string $key
     * @param string $iv
     * @return string
     * @throws Ex\CannotPerformOperationException
     */
    private static function plainDecrypt($ciphertext, $key, $iv, $config)
    {
        Core::ensureConstantExists("OPENSSL_RAW_DATA");
        Core::ensureFunctionExists("openssl_decrypt");
        $plaintext = \openssl_decrypt(
            $ciphertext,
            $config['CIPHER_METHOD'],
            $key,
            OPENSSL_RAW_DATA,
            $iv
        );
        if ($plaintext === false) {
            throw new Ex\CannotPerformOperationException(
                "openssl_decrypt() failed."
            );
        }

        return $plaintext;
    }

    /**
     * Verify a HMAC without crypto side-channels
     *
     * @staticvar boolean $native Use native hash_equals()?
     * @param string $correct_hmac HMAC string (raw binary)
     * @param string $message Ciphertext (raw binary)
     * @param string $key Authentication key (raw binary)
     * @return boolean
     * @throws Ex\CannotPerformOperationException
     */
    private static function verifyHMAC($correct_hmac, $message, $key, $config)
    {
        $message_hmac = \hash_hmac($config['HASH_FUNCTION'], $message, $key, true);
        return Core::hashEquals($correct_hmac, $message_hmac);
    }

    private static function testEncryptDecrypt($config)
    {
        $key = self::createNewRandomKey();
        $data = "EnCrYpT EvErYThInG\x00\x00";
        if (empty($config)) {
            $config = self::getVersionConfigFromHeader(Core::CURRENT_VERSION, Core::CURRENT_VERSION);
        }

        // Make sure encrypting then decrypting doesn't change the message.
        $ciphertext = self::encrypt($data, $key, true);
        try {
            $decrypted = self::decrypt($ciphertext, $key, true);
        } catch (Ex\InvalidCiphertextException $ex) {
            // It's important to catch this and change it into a
            // CryptoTestFailedExceptionException, otherwise a test failure could trick
            // the user into thinking it's just an invalid ciphertext!
            throw new Ex\CryptoTestFailedException();
        }
        if ($decrypted !== $data) {
            throw new Ex\CryptoTestFailedException();
        }

        // Modifying the ciphertext: Appending a string.
        try {
            self::decrypt($ciphertext . "a", $key, true);
            throw new Ex\CryptoTestFailedException();
        } catch (Ex\InvalidCiphertextException $e) { /* expected */ }

        // Modifying the ciphertext: Changing an IV byte.
        try {
            $ciphertext[4] = chr((ord($ciphertext[4]) + 1) % 256);
            self::decrypt($ciphertext, $key, true);
            throw new Ex\CryptoTestFailedException();
        } catch (Ex\InvalidCiphertextException $e) { /* expected */ }

        // Decrypting with the wrong key.
        $key = self::createNewRandomKey();
        $data = "abcdef";
        $ciphertext = self::encrypt($data, $key, true);
        $wrong_key = self::createNewRandomKey();
        try {
            self::decrypt($ciphertext, $wrong_key, true);
            throw new Ex\CryptoTestFailedException();
        } catch (Ex\InvalidCiphertextException $e) { /* expected */ }

        // Ciphertext too small (shorter than HMAC).
        $key = self::createNewRandomKey();
        $ciphertext = \str_repeat("A", $config['MAC_BYTE_SIZE'] - 1);
        try {
            self::decrypt($ciphertext, $key, true);
            throw new Ex\CryptoTestFailedException();
        } catch (Ex\InvalidCiphertextException $e) { /* expected */ }
    }

    /**
     * Run-time testing
     *
     * @throws Ex\CryptoTestFailedException
     */
    private static function HKDFTestVector($config)
    {
        // HKDF test vectors from RFC 5869
        if (empty($config)) {
            $config = self::getVersionConfigFromHeader(Core::CURRENT_VERSION, Core::CURRENT_VERSION);
        }

        // Test Case 1
        $ikm = \str_repeat("\x0b", 22);
        $salt = Encoding::hexToBin("000102030405060708090a0b0c");
        $info = Encoding::hexToBin("f0f1f2f3f4f5f6f7f8f9");
        $length = 42;
        $okm = Encoding::hexToBin(
            "3cb25f25faacd57a90434f64d0362f2a" .
            "2d2d0a90cf1a5a4c5db02d56ecc4c5bf" .
            "34007208d5b887185865"
        );
        $computed_okm = Core::HKDF("sha256", $ikm, $length, $info, $salt, $config);
        if ($computed_okm !== $okm) {
            throw new Ex\CryptoTestFailedException();
        }

        // Test Case 7
        $ikm = \str_repeat("\x0c", 22);
        $length = 42;
        $okm = Encoding::hexToBin(
            "2c91117204d745f3500d636a62f64f0a" .
            "b3bae548aa53d423b0d1f27ebba6f5e5" .
            "673a081d70cce7acfc48"
        );
        $computed_okm = Core::HKDF("sha1", $ikm, $length, '', null, $config);
        if ($computed_okm !== $okm) {
            throw new Ex\CryptoTestFailedException();
        }

    }

    /**
     * Run-Time tests
     *
     * @throws Ex\CryptoTestFailedException
     */
    private static function HMACTestVector($config)
    {
        if (empty($config)) {
            $config = self::getVersionConfigFromHeader(Core::CURRENT_VERSION, Core::CURRENT_VERSION);
        }
        // HMAC test vector From RFC 4231 (Test Case 1)
        $key = \str_repeat("\x0b", 20);
        $data = "Hi There";
        $correct = "b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7";
        if (\hash_hmac($config['HASH_FUNCTION'], $data, $key) !== $correct) {
            throw new Ex\CryptoTestFailedException();
        }
    }

    /**
     * Run-time tests
     *
     * @throws Ex\CryptoTestFailedException
     */
    private static function AESTestVector($config)
    {
        // AES CTR mode test vector from NIST SP 800-38A
        $key = Encoding::hexToBin("2b7e151628aed2a6abf7158809cf4f3c");
        $iv = Encoding::hexToBin("f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff");
        $plaintext = Encoding::hexToBin(
            "6bc1bee22e409f96e93d7e117393172a" .
            "ae2d8a571e03ac9c9eb76fac45af8e51" .
            "30c81c46a35ce411e5fbc1191a0a52ef" .
            "f69f2445df4f9b17ad2b417be66c3710"
        );
        $ciphertext = Encoding::hexToBin(
            "874d6191b620e3261bef6864990db6ce" .
            "9806f66b7970fdff8617187bb9fffdff" .
            "5ae4df3edbd5d35e5b4f09020db03eab" .
            "1e031dda2fbe03d1792170a0f3009cee"
        );

        $config = self::getVersionConfigFromHeader(Core::CURRENT_VERSION, Core::CURRENT_VERSION);

        $computed_ciphertext = self::plainEncrypt($plaintext, $key, $iv, $config);
        if ($computed_ciphertext !== $ciphertext) {
            throw new Ex\CryptoTestFailedException();
        }

        $computed_plaintext = self::plainDecrypt($ciphertext, $key, $iv, $config);
        if ($computed_plaintext !== $plaintext) {
            throw new Ex\CryptoTestFailedException();
        }
    }

    private static function getVersionConfigFromHeader($header, $min_ver_header)
    {
        if ($header[0] !== Core::HEADER_MAGIC[0] || $header[1] !== Core::HEADER_MAGIC[1]) {
            throw new Ex\InvalidCiphertextException(
                "Ciphertext has a bad magic number."
            );
        }

        $major = \ord($header[2]);
        $minor = \ord($header[3]);

        $min_major = \ord($min_ver_header[2]);
        $min_minor = \ord($min_ver_header[3]);

        if ($major < $min_major || ($major === $min_major && $minor < $min_minor) ) {
            throw new Ex\InvalidCiphertextException(
                "Ciphertext is requesting an insecure fallback."
            );
        }

        $config = self::getVersionConfigFromMajorMinor($major, $minor);

        return $config;
    }

    private static function getVersionConfigFromMajorMinor($major, $minor)
    {
        if ($major === 2) {
            switch ($minor) {
                case 0:
                    return [
                        'CIPHER_METHOD' => 'aes-128-ctr',
                        'BLOCK_SIZE' => 16,
                        'KEY_BYTE_SIZE' => 16,
                        'SALT_SIZE' => 16,
                        'HASH_FUNCTION' => 'sha256',
                        'MAC_BYTE_SIZE' => 32,
                        'ENCRYPTION_INFO' => 'DefusePHP|V2|KeyForEncryption',
                        'AUTHENTICATION_INFO' => 'DefusePHP|V2|KeyForAuthentication'
                    ];
                default:
                    throw new Ex\InvalidCiphertextException(
                        "Unsupported ciphertext version."
                    );
            }
        } elseif ($major === 1) {
            switch ($minor) {
                case 0:
                    return [
                        'CIPHER_METHOD' => 'aes-128-cbc',
                        'BLOCK_SIZE' => 16,
                        'KEY_BYTE_SIZE' => 16,
                        'HASH_FUNCTION' => 'sha256',
                        'MAC_BYTE_SIZE' => 32,
                        'ENCRYPTION_INFO' => 'DefusePHP|KeyForEncryption',
                        'AUTHENTICATION_INFO' => 'DefusePHP|KeyForAuthentication'
                    ];
                default:
                    throw new Ex\InvalidCiphertextException(
                        "Unsupported ciphertext version."
                    );
            }
        }
    }

}
