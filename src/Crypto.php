<?php
namespace Defuse\Crypto;

use \Defuse\Crypto\Exception as Ex;

/*
 * PHP Encryption Library
 * Copyright (c) 2014-2015, Taylor Hornby
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
final class Crypto extends Core
{
    // Ciphertext format: [____HMAC____][____IV____][____CIPHERTEXT____].

    /* DO NOT CHANGE THESE CONSTANTS!
     *
     * We spent *weeks* testing this code, making sure it is as perfect and
     * correct as possible. Are you going to do the same after making your
     * changes? Probably not. Besides, any change to these constants will break
     * the runtime tests, which are extremely important for your security.
     * You're literally millions of times more likely to screw up your own
     * security by changing something here than you are to fall victim to an
     * 128-bit key brute-force attack. You're also breaking your own
     * compatibility with future updates to this library, so you'll be left
     * vulnerable if we ever find a security bug and release a fix.
     *
     * So, PLEASE, do not change these constants.
     */
    const CIPHER_MODE = 'cbc';

    /**
     * Use this to generate a random encryption key.
     * 
     * @return string
     */
    public static function createNewRandomKey()
    {
        self::runtimeTest();
        return self::secureRandom(self::KEY_BYTE_SIZE);
    }

    /**
     * 
     * Encrypts a message.
     * $plaintext is the message to encrypt.
     * $key is the encryption key, a value generated by CreateNewRandomKey().
     * You MUST catch exceptions thrown by this function. See docs above.
     * 
     * @param string $plaintext
     * @param string $key
     * @return string
     * @throws Ex\CannotPerformOperation
     */
    public static function encrypt($plaintext, $key)
    {
        self::runtimeTest();

        if (self::ourStrlen($key) !== self::KEY_BYTE_SIZE)
        {
            throw new Ex\CannotPerformOperation("Bad key.");
        }

        $method = self::CIPHER.'-'.self::CIPHER_MODE;

        self::ensureFunctionExists('openssl_get_cipher_methods');
        if (\in_array($method, \openssl_get_cipher_methods()) === FALSE) {
            throw new Ex\CannotPerformOperation("Cipher method not supported.");
        }

        // Generate a sub-key for encryption.
        $keysize = self::KEY_BYTE_SIZE;
        $ekey = self::HKDF(self::HASH_FUNCTION, $key, $keysize, self::ENCRYPTION_INFO);

        // Generate a random initialization vector.
        self::ensureFunctionExists("openssl_cipher_iv_length");
        $ivsize = \openssl_cipher_iv_length($method);
        if ($ivsize === FALSE || $ivsize <= 0) {
            throw new Ex\CannotPerformOperation();
        }
        $iv = self::secureRandom($ivsize);

        $ciphertext = $iv . self::plainEncrypt($plaintext, $ekey, $iv);

        // Generate a sub-key for authentication and apply the HMAC.
        $akey = self::HKDF(self::HASH_FUNCTION, $key, self::KEY_BYTE_SIZE, self::AUTHENTICATION_INFO);
        $auth = \hash_hmac(self::HASH_FUNCTION, $ciphertext, $akey, true);
        $ciphertext = $auth . $ciphertext;

        return $ciphertext;
    }

    /**
     * Decrypts a ciphertext.
     * $ciphertext is the ciphertext to decrypt.
     * $key is the key that the ciphertext was encrypted with.
     * You MUST catch exceptions thrown by this function. See docs above.
     * 
     * @param string $ciphertext
     * @param string $key
     * @return type
     * @throws Ex\CannotPerformOperation
     * @throws Ex\InvalidCiphertext
     */
    public static function decrypt($ciphertext, $key)
    {
        self::runtimeTest();

        $method = self::CIPHER.'-'.self::CIPHER_MODE;

        self::ensureFunctionExists('openssl_get_cipher_methods');
        if (\in_array($method, \openssl_get_cipher_methods()) === FALSE) {
            throw new Ex\CannotPerformOperation("Cipher method not supported.");
        }

        // Extract the HMAC from the front of the ciphertext.
        if (self::ourStrlen($ciphertext) <= self::MAC_BYTE_SIZE) {
            throw new Ex\InvalidCiphertext();
        }
        $hmac = self::ourSubstr($ciphertext, 0, self::MAC_BYTE_SIZE);
        if ($hmac === FALSE) {
            throw new Ex\CannotPerformOperation();
        }
        $ciphertext = self::ourSubstr($ciphertext, self::MAC_BYTE_SIZE);
        if ($ciphertext === FALSE) {
            throw new Ex\CannotPerformOperation();
        }

        // Regenerate the same authentication sub-key.
        $akey = self::HKDF(self::HASH_FUNCTION, $key, self::KEY_BYTE_SIZE, self::AUTHENTICATION_INFO);

        if (self::verifyHMAC($hmac, $ciphertext, $akey)) {
            // Regenerate the same encryption sub-key.
            $keysize = self::KEY_BYTE_SIZE;
            $ekey = self::HKDF(self::HASH_FUNCTION, $key, $keysize, self::ENCRYPTION_INFO);

            // Extract the initialization vector from the ciphertext.
            self::EnsureFunctionExists("openssl_cipher_iv_length");
            $ivsize = \openssl_cipher_iv_length($method);
            if ($ivsize === FALSE || $ivsize <= 0) {
                throw new Ex\CannotPerformOperation();
            }
            if (self::ourStrlen($ciphertext) <= $ivsize) {
                throw new Ex\InvalidCiphertext();
            }
            $iv = self::ourSubstr($ciphertext, 0, $ivsize);
            if ($iv === FALSE) {
                throw new Ex\CannotPerformOperation();
            }
            $ciphertext = self::ourSubstr($ciphertext, $ivsize);
            if ($ciphertext === FALSE) {
                throw new Ex\CannotPerformOperation();
            }

            $plaintext = self::plainDecrypt($ciphertext, $ekey, $iv);

            return $plaintext;
        } else {
            /*
             * We throw an exception instead of returning FALSE because we want
             * a script that doesn't handle this condition to CRASH, instead
             * of thinking the ciphertext decrypted to the value FALSE.
             */
             throw new Ex\InvalidCiphertext();
        }
    }

    /*
     * Runs tests.
     * Raises Exception\CannotPerformOperation or Exception\CryptoTestFailed if
     * one of the tests fail. If any tests fails, your system is not capable of
     * performing encryption, so make sure you fail safe in that case.
     */
    public static function runtimeTest()
    {
        // 0: Tests haven't been run yet.
        // 1: Tests have passed.
        // 2: Tests are running right now.
        // 3: Tests have failed.
        static $test_state = 0;

        if ($test_state === 1 || $test_state === 2) {
            return;
        }

        try {
            $test_state = 2;
            self::AESTestVector();
            self::HMACTestVector();
            self::HKDFTestVector();

            self::testEncryptDecrypt();
            if (self::ourStrlen(self::createNewRandomKey()) != self::KEY_BYTE_SIZE) {
                throw new Ex\CryptoTestFailed();
            }

            if (self::ENCRYPTION_INFO == self::AUTHENTICATION_INFO) {
                throw new Ex\CryptoTestFailed();
            }
        } catch (Ex\CryptoTestFailed $ex) {
            // Do this, otherwise it will stay in the "tests are running" state.
            $test_state = 3;
            throw $ex;
        }

        // Change this to '0' make the tests always re-run (for benchmarking).
        $test_state = 1;
    }

    /**
     * Never call this method directly!
     * 
     * Unauthenticated message encryption.
     * 
     * @param string $plaintext
     * @param string $key
     * @param string $iv
     * @return string
     * @throws Ex\CannotPerformOperation
     */
    private static function plainEncrypt($plaintext, $key, $iv)
    {

        $method = self::CIPHER.'-'.self::CIPHER_MODE;

        self::ensureConstantExists("OPENSSL_RAW_DATA");
        self::ensureFunctionExists("openssl_encrypt");
        $ciphertext = \openssl_encrypt(
            $plaintext,
            $method,
            $key,
            OPENSSL_RAW_DATA,
            $iv
        );

        if ($ciphertext === false) {
            throw new Ex\CannotPerformOperation();
        }

        return $ciphertext;
    }

    /**
     * Never call this method directly!
     * 
     * Unauthenticated message deryption.
     * 
     * @param string $ciphertext
     * @param string $key
     * @param string $iv
     * @return string
     * @throws Ex\CannotPerformOperation
     */
    private static function plainDecrypt($ciphertext, $key, $iv)
    {

        $method = self::CIPHER.'-'.self::CIPHER_MODE;

        self::ensureConstantExists("OPENSSL_RAW_DATA");
        self::ensureFunctionExists("openssl_decrypt");
        $plaintext = \openssl_decrypt(
            $ciphertext,
            $method,
            $key,
            OPENSSL_RAW_DATA,
            $iv
        );
        if ($plaintext === FALSE) {
            throw new Ex\CannotPerformOperation();
        }

        return $plaintext;
    }

    private static function testEncryptDecrypt()
    {
        $key = self::createNewRandomKey();
        $data = "EnCrYpT EvErYThInG\x00\x00";

        // Make sure encrypting then decrypting doesn't change the message.
        $ciphertext = self::encrypt($data, $key);
        try {
            $decrypted = self::decrypt($ciphertext, $key);
        } catch (Ex\InvalidCiphertext $ex) {
            // It's important to catch this and change it into a
            // Exception\CryptoTestFailed, otherwise a test failure could trick
            // the user into thinking it's just an invalid ciphertext!
            throw new Ex\CryptoTestFailed();
        }
        if($decrypted !== $data) {
            throw new Ex\CryptoTestFailed();
        }

        // Modifying the ciphertext: Appending a string.
        try {
            self::decrypt($ciphertext . "a", $key);
            throw new Ex\CryptoTestFailed();
        } catch (Ex\InvalidCiphertext $e) { /* expected */ }

        // Modifying the ciphertext: Changing an IV byte.
        try {
            $ciphertext[0] = chr((ord($ciphertext[0]) + 1) % 256);
            self::decrypt($ciphertext, $key);
            throw new Ex\CryptoTestFailed();
        } catch (Ex\InvalidCiphertext $e) { /* expected */ }

        // Decrypting with the wrong key.
        $key = self::createNewRandomKey();
        $data = "abcdef";
        $ciphertext = self::encrypt($data, $key);
        $wrong_key = self::createNewRandomKey();
        try {
            self::decrypt($ciphertext, $wrong_key);
            throw new Ex\CryptoTestFailed();
        } catch (Ex\InvalidCiphertext $e) { /* expected */ }

        // Ciphertext too small (shorter than HMAC).
        $key = self::createNewRandomKey();
        $ciphertext = \str_repeat("A", self::MAC_BYTE_SIZE - 1);
        try {
            self::decrypt($ciphertext, $key);
            throw new Ex\CryptoTestFailed();
        } catch (Ex\InvalidCiphertext $e) { /* expected */ }
    }

    /**
     * Run-time testing
     * 
     * @throws Ex\CryptoTestFailed
     */
    private static function HKDFTestVector()
    {
        // HKDF test vectors from RFC 5869

        // Test Case 1
        $ikm = \str_repeat("\x0b", 22);
        $salt = self::hexToBin("000102030405060708090a0b0c");
        $info = self::hexToBin("f0f1f2f3f4f5f6f7f8f9");
        $length = 42;
        $okm = self::hexToBin(
            "3cb25f25faacd57a90434f64d0362f2a" .
            "2d2d0a90cf1a5a4c5db02d56ecc4c5bf" .
            "34007208d5b887185865"
        );
        $computed_okm = self::HKDF("sha256", $ikm, $length, $info, $salt);
        if ($computed_okm !== $okm) {
            throw new Ex\CryptoTestFailed();
        }

        // Test Case 7
        $ikm = \str_repeat("\x0c", 22);
        $length = 42;
        $okm = self::hexToBin(
            "2c91117204d745f3500d636a62f64f0a" .
            "b3bae548aa53d423b0d1f27ebba6f5e5" .
            "673a081d70cce7acfc48"
        );
        $computed_okm = self::HKDF("sha1", $ikm, $length);
        if ($computed_okm !== $okm) {
            throw new Ex\CryptoTestFailed();
        }

    }

    /**
     * Run-Time tests
     * 
     * @throws Ex\CryptoTestFailed
     */
    private static function HMACTestVector()
    {
        // HMAC test vector From RFC 4231 (Test Case 1)
        $key = \str_repeat("\x0b", 20);
        $data = "Hi There";
        $correct = "b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7";
        if (\hash_hmac(self::HASH_FUNCTION, $data, $key) !== $correct) {
            throw new Ex\CryptoTestFailed();
        }
    }

    /**
     * Run-time tests
     * 
     * @throws Ex\CryptoTestFailed
     */
    private static function AESTestVector()
    {
        // AES CBC mode test vector from NIST SP 800-38A
        $key = self::hexToBin("2b7e151628aed2a6abf7158809cf4f3c");
        $iv = self::hexToBin("000102030405060708090a0b0c0d0e0f");
        $plaintext = self::hexToBin(
            "6bc1bee22e409f96e93d7e117393172a" .
            "ae2d8a571e03ac9c9eb76fac45af8e51" .
            "30c81c46a35ce411e5fbc1191a0a52ef" .
            "f69f2445df4f9b17ad2b417be66c3710"
        );
        $ciphertext = self::hexToBin(
            "7649abac8119b246cee98e9b12e9197d" .
            "5086cb9b507219ee95db113a917678b2" .
            "73bed6b8e3c1743b7116e69e22229516" .
            "3ff1caa1681fac09120eca307586e1a7" .
            /* Block due to padding. Not from NIST test vector.
                Padding Block: 10101010101010101010101010101010
                Ciphertext:    3ff1caa1681fac09120eca307586e1a7
                           (+) 2fe1dab1780fbc19021eda206596f1b7
                           AES 8cb82807230e1321d3fae00d18cc2012

             */
            "8cb82807230e1321d3fae00d18cc2012"
        );

        $computed_ciphertext = self::plainEncrypt($plaintext, $key, $iv);
        if ($computed_ciphertext !== $ciphertext) {
            throw new Ex\CryptoTestFailed();
        }

        $computed_plaintext = self::plainDecrypt($ciphertext, $key, $iv);
        if ($computed_plaintext !== $plaintext) {
            throw new Ex\CryptoTestFailed();
        }
    }
}
